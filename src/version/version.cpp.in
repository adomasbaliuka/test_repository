//
// Created by alice on 29.12.20.
// Adapted from AFF3CT library https://github.com/aff3ct/aff3ct.
// This .cpp.in file is meant to be configured automatically by CMake
// and then turned into a .cpp file to be compiled.
//

#include <vector>
#include <sstream>

#include "version/version.hpp"


namespace TestProj::Version {
    constexpr auto GIT_SHA1 = "@GIT_SHA1@";
    constexpr auto GIT_VERSION = "@GIT_VERSION@";

    namespace {
        /*!
        * Utility method to split a string into delimited parts.
        */
        std::vector<std::string> split(const std::string &s, char delim)
        {
            std::stringstream ss(s);
            std::string item;
            std::vector<std::string> elems;
            while (std::getline(ss, item, delim))
                elems.push_back(std::move(item));

            return elems;
        }
    }

    std::string git_sha1()
    {
        std::string sha1(GIT_SHA1);
        return sha1;
    }

    std::string version()
    {
        std::string version(GIT_VERSION);
        return version;
    }

    int version_major()
    {
        std::string version(GIT_VERSION);

        if (version == "GIT-NOTFOUND")
        {
            return -1;
        }
        else
        {
            auto vs = split(version, '.');

            if (vs.empty())
                return -2;
            else
            {
                vs[0].erase(0,1);
                if (vs[0].empty())
                    return -3;
                else
                    return std::stoi(vs[0]);
            }
        }
    }

    int version_minor()
    {
        std::string version(GIT_VERSION);

        if (version == "GIT-NOTFOUND")
        {
            return -1;
        }
        else
        {
            auto vs = split(version, '.');

            if (vs.size() < 2)
                return -2;
            else
            {
                auto vs2 = split(vs[1], '-');

                if (vs2[0].empty())
                    return -3;
                else
                    return std::stoi(vs2[0]);
            }
        }
    }

    int version_release()
    {
        std::string version(GIT_VERSION);

        if (version == "GIT-NOTFOUND")
        {
            return -1;
        }
        else
        {
            auto vs = split(version, '.');

            if (vs.size() < 3)
                return -2;
            else
            {
                auto vs3 = split(vs[2], '-');

                if (vs3[0].empty())
                    return -3;
                else
                    return std::stoi(vs3[0]);
            }
        }
    }
}
